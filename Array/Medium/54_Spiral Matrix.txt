class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new  ArrayList<Integer>();
        
        int m=matrix.length;
         if(m==0)
            return result;
        int n=matrix[0].length;
       
        
        for(int i=0;i<Math.min(m,n)/2;i++){
            
            
           int  j=i;
           int  k=i;
            while(true){
                
                result.add(matrix[j][k]);
                
               if((j==i)&&(k<n-i-1)){
                k++;
               } 
              else if((j<m-i-1)&&(k==n-i-1)){
                  j++;
              }
              else if((k>i)&&(j==m-1-i)){
                  k--;
              }
              else if((k==i)&&(j>i)){
                  j--;
              }
                if((j==i)&&(k==i))
                    break;                         //总共三种情况
    
            }
            
        }                                         //4*4  4/2=2刚好两圈 前面就构造完了   后面就不用处理了
        
        int p=0;
        int l=0;
        
        
        if((m==n)&&(m%2==1))                        //3*3这种  再加上最里面的一个数
            result.add(matrix[m/2][n/2]);
        else if(Math.min(m,n)%2==1){                // 5*7   5%2==1      
            
            if(m<n){
                p=m/2;
                l=m/2;
                for(;l<n-m/2;l++){
                    result.add(matrix[p][l]); 
                }
            }
          else  if(m>n){
                 p=n/2;
                 l=n/2;
                for(;p<m-n/2;p++){
                    result.add(matrix[p][l]); 
                }
                
            }
        
        }

        
            return result;
    }
}
