/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        List<Interval> result=new ArrayList<Interval>();
        if(intervals.size()==0)
            return result;
        Collections.sort(intervals,new Comparator<Interval>(){               //这道题有点难，主要在排序部分
            public int compare(Interval i1,Interval i2){
                if(i2.end>i1.end){
                   if(i1.start<=i2.start)                                    //  i1 [35,49]   i2 [38,50]     i1<i2                         1
                     return -1;
                    else return 1;                                           //  i1 [35,49]   i2 [32,50]     i1>i2    包含关系  把i1放在后面 2
                }
                   
                else if(i2.end<i1.end){
                    if(i2.start<=i1.start)                                   //  i1 [38,50]   i2 [35,49]     i1>i2                          3
                    return 1;
                    else return -1;                                          //  i1 [32,50]   i2 [35,49]     i1<i2    包含关系  把i2放在后面 4
                }   
                else if(i1.end==i2.end){
                    if(i2.start>i1.start)                                    //  i1 [32,50]   i2 [35,50]     i1<i2                         5
                        return -1;
                    else if(i2.start<i1.start)                               //  i1 [35,50]   i2 [32,50]     i1<i2                         6
                        return 1;
                    else return 0;                                           //相等                                                         7
                }
                else return 0;
                
            }
        });
       
      
        
        for(int i=1;i<intervals.size();i++){
            
            if(intervals.get(i).start>intervals.get(i-1).end)                         //[32,35]   [36,38]     
                result.add(intervals.get(i-1));                
            else if((intervals.get(i).start<=intervals.get(i-1).end)&&(intervals.get(i).end>=intervals.get(i-1).end)&&   (intervals.get(i).start>=intervals.get(i-1).start)){                                 //[1,5]     [3,8]
                intervals.get(i).start=intervals.get(i-1).start;
    
            }
            else if((intervals.get(i).start>=intervals.get(i-1).start)&&(intervals.get(i).end<=intervals.get(i-1).end)){
                intervals.get(i).start=intervals.get(i-1).start;                     //[3,8]       [4,6]
                intervals.get(i).end=intervals.get(i-1).end;
            }
                                                                                    //[3,8]        [2,11] 这种情况不处理
        
        }
        result.add(intervals.get(intervals.size()-1));
        
        
        
        
        
        return result;
    }
}

/*
 public List<Interval> merge(List<Interval> intervals) {
        int[] be_used = new int[intervals.size()];
        for(int i=0;i<intervals.size();i++){
            be_used[i]=1;
            for(int j=i+1;j<intervals.size();j++){
                
                if(be_used[j]==0){
                    
                   if((intervals.get(i).start>intervals.get(j).start)&&(intervals.get(i).end<intervals.get(j).end)){
                       be_used[j]=1;
                       intervals.set(i)=intervals.get(j);
                   }
                   else if((intervals.get(i).start>intervals.get(j).start)&&(intervals.get(i).start>intervals.get(j).end)&&(intervals.get(i).end>intervals.get(j).end))
                    
                }
                
            }
        }
    }



if(i1.end<=i2.start)
                    return -1;
                else if((i1.end<=i2.end)&&(i1.start>=i2.start))
                    return -1;
                else if((i1.end<=i2.end)&&(i1.start>i2.start))
                    return -1;
                else if(i2.end<=i1.start)
                    return 1;
                else if((i2.end<=i1.end)&&(i2.start>=i1.start))
                    return 1;
                else if((i2.end<=i1.end)&&(i2.start>i1.start))
                    return 1;
                else return 0;
*/