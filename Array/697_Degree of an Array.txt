class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer,Integer> m=new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(m.containsKey(nums[i]))
                m.put(nums[i],m.get(nums[i])+1);
            else m.put(nums[i],1);
        }
        int max=0;
        
        List<Integer> list = new ArrayList<Integer>();   //存放出现次数一致的整数
        
        for(Integer j:m.keySet()){
            if(m.get(j)>max){
                max=m.get(j);
                list.clear();
                list.add(j);
                
            }
            else if(m.get(j)==max)
                list.add(j);
                
        }
        
        int min=nums.length;
        for(int t=0;t<list.size();t++){
            if(getshort(list.get(t),nums)<min)      //比较出现次数最多的且一样的几个数组 的长度
                min=getshort(list.get(t),nums);
        }
        return min;
        
        
    }
    private int getshort(int temp,int[] nums){
            
            int first=0;
        int last=0;
        for(int k=0;k<nums.length;k++){
            if((nums[k]==temp)&&(first==0))
                first=k+1;
            else if((nums[k]==temp)&&(first!=0))
                last=k+1; 
            
        }
        
        if(last!=0)
            return last-first+1;
        else return 1;    
        }
}