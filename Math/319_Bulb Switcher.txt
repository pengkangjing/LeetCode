class Solution {
    public int bulbSwitch(int n) {
        
        if((n==0)&&(n==1))
            return n;
        
       
       return (int)Math.sqrt(n); //为什么是这么做 ，因为 例如 6=1*2*3*6；会在第一次打开第二次关闭第三次打开 第6次关闭
    }                            //某个数如果包含某个因子i，那么一定包含另一个因子 n/i ，这两个是一对 对应一次打开一次关闭 所以最后的结果是关闭的
}                                //特殊情况 n是完全平方数 n=i*i 那么第i次打开 没有与之对应的关闭操作 所以这个灯是打开的 
//下面这个暴力解法 超时
/*
 public int bulbSwitch(int n) {
        
        if((n==0)&&(n==1))
            return n;
        
        int[] result = new int[n];
        for(int k=0;k<n;k++){
            result[k]=1;
        }
        
        for(int i=2;i<=n;i++){
            
            for(int j=i-1;j<n;j+=i){
                    result[j]=-result[j];
                  //  System.out.println(result[j]+" "+j+"  j");
                }
                // System.out.println("haha");
           }
            
        
        int count=0;
        for(int l=0;l<n;l++){
            if(result[l]==1)
                count++;
           
        }
       return count; 
    }
*/