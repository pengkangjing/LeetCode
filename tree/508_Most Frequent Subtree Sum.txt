/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        Map<Integer,Integer>  m = new HashMap<Integer,Integer>();             // 递归计算
        List<Integer> result = new ArrayList<Integer>();
        if(root==null)
            return new int[0];
        int t=findSum(root,m);                                              //返回root左边子树和右边子数的及自己的和
        m.put(t,m.getOrDefault(t,0)+1);                                     //把和放进map中
    
        int max=Integer.MIN_VALUE;             
        for(Integer key:m.keySet()){                                        //查找最大的和 
            if(m.get(key)==max)
                result.add(key);
            else if(m.get(key)>max){
                max=m.get(key);
                result.clear();
                result.add(key);
            }
        }
        Integer[] temp=result.toArray(new Integer[result.size()]);        //返回结果
        int[] a  = new int[temp.length];
        for(int i=0;i<temp.length;i++){
            a[i]=temp[i];
        }
        return a;
    }
    private  int findSum(TreeNode root,Map<Integer,Integer> m){
      if((root.left==null)&&(root.right==null))                    //如果这个节点没有左右子树了 直接返回自己的值
            return root.val;
        
       int result=root.val;
        
       if(root.left!=null){                                       //如果左子树存在
           int left =  findSum(root.left,m);                     // 处理左子树 返回左子树的和
           m.put(left,m.getOrDefault(left,0)+1);                 //存入map
           result+=left;
       }
       
       if(root.right!=null) {                                    //如果右子树存在
          int right =  findSum(root.right,m);
          m.put(right,m.getOrDefault(right,0)+1);
          result+=right;
       }
       
       return result;                                           //返回子树的及自身的和
    }
}