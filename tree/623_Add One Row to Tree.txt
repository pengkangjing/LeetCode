/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        if(d==1)
        {
           TreeNode temp=new TreeNode(v);                                      //左节点  新增的节点的左边接原来的左边   对比下面的不同  ****
            temp.left=root;
            temp.right=null;
            
            return temp;
        }
        else {
            
            if(root.left!=null)
                root.left=addOneRow(root.left,v,d-1);
            if((root.left==null)&&(d==2))                                  //加这两行是为了 防止某一行的左边或右边的节点为空
                root.left=new TreeNode(v);                                 // 新增的一行在其下边漏了  下面同理   详见最后一次提交错误
            if(root.right!=null)
                root.right=addRight(root.right,v,d-1);
            if((root.right==null)&&(d==2))                                 //
                root.right=new TreeNode(v);;   
            
        }
        return root;
    }
    public TreeNode addRight(TreeNode root, int v, int d) {                  //
        if(d==1)
        {
           TreeNode temp=new TreeNode(v);
            temp.left=null;                                                  //右节点 新增的节点的右边接原来的右边  对比****上面的不同
            temp.right=root;
            
            return temp;
        }
        else {
            
            if(root.left!=null)
                root.left=addOneRow(root.left,v,d-1);
            if((root.left==null)&&(d==2))                                    //
                root.left=new TreeNode(v);;
            if(root.right!=null)
                root.right=addRight(root.right,v,d-1);
            if((root.right==null)&&(d==2))                                   //
                root.right=new TreeNode(v);;   
            
        }
        return root;
    }
    
}

/*
private void add_Row(TreeNode root, int v, int d) {    //这里不用管 之前打的草稿
        if(d==1){
            if(root.left!=null){
                TreeNode left = new TreeNode(v);
                left.left=root.left;
            }
            if(root.right!=null){
                TreeNode right = new TreeNode(v);
                right.left=root.right;
            }
        }
        else {
            if(root.left!=null){
                add_Row(root.left,v,d-1);
            }
            if(root.right!=null){
                add_Row(root.right,v,d-1);
            }
        }
            
    }
    
*/    