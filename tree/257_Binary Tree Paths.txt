/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result=new ArrayList<String>();
        if(root==null)
            return result;
        if((root.left==null)&&(root.right==null)){
            result.add(String.valueOf(root.val));
            return result;
        }
            
        if(root.left!=null){
            List<String> left_temp=binaryTreePaths(root.left);
            for(int i=0;i<left_temp.size();i++){
                result.add(String.valueOf(root.val)+"->"+left_temp.get(i));
            }
            
        }
           
        if(root.right!=null){
            List<String> right_temp=binaryTreePaths(root.right);
            for(int i=0;i<right_temp.size();i++){
                result.add(String.valueOf(root.val)+"->"+right_temp.get(i));
            } 
        }
          
        
        
       return result;
        
    }
}