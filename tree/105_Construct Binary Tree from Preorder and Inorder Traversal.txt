/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        if(preorder.length==0)
            return null;
        
       int[] left_inorder;
       int[] right_inorder;
       int[] left_preorder;
       int[] right_preorder;
        
       TreeNode root =new TreeNode(preorder[0]);
       if(preorder.length==0)
            return root;
        
       for(int i=0;i<inorder.length;i++){
           if(inorder[i]==preorder[0]){
            
               left_inorder=new int[i];
               for(int j=0;j<i;j++)
                   left_inorder[j]=inorder[j];
            
           
               right_inorder=new int[inorder.length-i-1];
               for(int k=i+1;k<inorder.length;k++)
                   right_inorder[k-i-1]=inorder[k];
               
            
               left_preorder=new int[i];
               for(int l=1;l<1+i;l++)
                   left_preorder[l-1]=preorder[l];
               
               right_preorder= new int[preorder.length-i-1];
               for(int m=i+1;m<preorder.length;m++)
                   right_preorder[m-i-1]=preorder[m];
               
               root.left=buildTree(left_preorder,left_inorder);
               root.right=buildTree(right_preorder,right_inorder);
          
               break;
           }
       } 
       
       return root;
    }
}