class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {           //这个方法是对下面的那个方法的改进 
        
        if((s1.length()==0)&&(s2.length()==0)&&(s3.length()==0))             //加了一个数组，保存不可行的 匹配方式
            return true;                                                     // 从而减少了重复比较  不会再超时了  这个就是动态规划的思想
        
        boolean[][] invalid = new boolean[s1.length()+1][s2.length()+1];     //下次再遇到这样超时可以尝试从这方面考虑
        if((s1.length()+s2.length())!=s3.length())
            return false;
        return dfs(s1,s2,s3,0,0,0,invalid);
        
       
    }
    private boolean dfs(String s1, String s2, String s3,int i,int j, int k,boolean[][] invalid){
        if(invalid[i][j]) return false;
        if(k==s3.length())
            return true;
        if((i<s1.length())&&(s1.charAt(i)==s3.charAt(k))){
            if(dfs(s1,s2,s3,i+1,j,k+1,invalid))
                return true;
            
        }
        if(j<(s2.length())&&(s2.charAt(j)==s3.charAt(k))){
            if(dfs(s1,s2,s3,i,j+1,k+1,invalid))
                return true;;
        } 
        
        invalid[i][j]=true;
        return false;
        
    }
}
/*
 public boolean isInterleave(String s1, String s2, String s3) {
        
        if((s1.length()==0)&&(s2.length()==0)&&(s3.length()==0))             //这个方法会超时   看上面的改进
            return true;
        
        if((s1.length()==1)&&(s2.length()==0)&&(s3.length()==1))
            return s1.charAt(0)==s3.charAt(0);
        if((s1.length()==0)&&(s2.length()==1)&&(s3.length()==1))
            return s2.charAt(0)==s3.charAt(0);
        
        if((s1.length()+s2.length())!=s3.length())
            return false;
        
        if((s1.length()>0)&&(s1.charAt(0)==s3.charAt(0))){
            if(isInterleave(s1.substring(1),s2,s3.substring(1)))
                return true;
        }
        if((s2.length()>0)&&(s2.charAt(0)==s3.charAt(0))){
            if(isInterleave(s1,s2.substring(1),s3.substring(1)))
                return true;;
        }    
        return false;
       
    }
 public boolean isInterleave(String s1, String s2, String s3) {
        
        int[]  temp = new  int[s3.length()];
        
        if((s1.length()+s2.length())!=s3.length())
            return false;
        
        
        int j=0;
        for(int i=0;i<s3.length();i++){
            
            if(s3.charAt(i)==s1.charAt(j)){
                j++;
                temp[i]=1;
                if(j==s1.length())
                    break;
            }
        }                               // 这个方法 有问题 "aabcc"
                                        //                "dbbca"
                                        //                "aadbbcbcac"   第一个字符串 匹配 0 1 3 5 7 剩下 d b b a c 所以有问题
        
        if(j!=s1.length())
            return false;
        System.out.println("haha");
        int l=0;
        for(int k=0;k<s3.length();k++){
            if(temp[k]==1)
                continue;
            if((temp[k]==0)&&(s3.charAt(k)!=s2.charAt(l)))
                return false;
            
            System.out.println(k+" haha "+ l);
            l++;
        }
        return true;
    }

*/