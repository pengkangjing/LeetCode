class Solution {
    public int minPathSum(int[][] grid) {
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if((i==0)&&(j!=0))
                    grid[i][j]=grid[i][j]+grid[i][j-1];
                else if((i!=0)&&(j==0))
                    grid[i][j]=grid[i][j]+grid[i-1][j];
                else if((i==0)&&(j==0))
                    grid[i][j]=grid[i][j];
                else grid[i][j]=grid[i][j]+Math.min(grid[i-1][j],grid[i][j-1]);
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
        
}
//自己写的动态规划，时间复杂度很高，空间复杂度也高，对稍大一点的数组就超时
/*

public int minPathSum(int[][] grid) {
        
        if((grid.length>1)&&(grid[0].length>1)){
            
            int[][] grid_right = new int[grid.length][grid[0].length-1];
            for(int i=0;i<grid.length;i++){
                for(int j=1;j<grid[0].length;j++){
                    grid_right[i][j-1]=grid[i][j];
                }
            }
            int[][] grid_down = new int[grid.length-1][grid[0].length];
            for(int i=1;i<grid.length;i++){
                for(int j=0;j<grid[0].length;j++){
                    grid_down[i-1][j]=grid[i][j];
                }
            }
            
           return grid[0][0]+Math.min(minPathSum(grid_right),minPathSum(grid_down)); 
            
            
        }
        else if ((grid.length==1)&&(grid[0].length>1)){
            
             int[][] grid_right = new int[grid.length][grid[0].length-1];
            for(int i=0;i<grid.length;i++){
                for(int j=1;j<grid[0].length;j++){
                    grid_right[i][j-1]=grid[i][j];
                }
            }
            
            return grid[0][0]+minPathSum(grid_right);
            
            
        }
        
        else if((grid.length>1)&&(grid[0].length==1)){
            
             int[][] grid_down = new int[grid.length-1][grid[0].length];
            for(int i=1;i<grid.length;i++){
                for(int j=0;j<grid[0].length;j++){
                    grid_down[i-1][j]=grid[i][j];
                }
            }
             return grid[0][0]+minPathSum(grid_down);
        }
        else return grid[0][0];
       

            
            
    }
*/
