class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        for(int i=0;i<9;i++){
            int[] visited = new int[9];
            for(int j=0;j<9;j++){
                if(board[i][j]=='.')
                    continue;
               // System.out.println(Integer.valueOf('0'));
                if(visited[Integer.valueOf(board[i][j]-'0')-1]==1)
                    return false;
                visited[Integer.valueOf(board[i][j]-'0')-1]=1;
            }
        }
        for(int i=0;i<9;i++){
            int[] visited = new int[9];
            for(int j=0;j<9;j++){
                if(board[j][i]=='.')
                    continue;
                if(visited[Integer.valueOf(board[j][i]-'0')-1]==1)
                    return false;
                visited[Integer.valueOf(board[j][i]-'0')-1]=1;
            }
        }
        for(int i=1;i<9;i=i+3){
            
            for(int j=1;j<9;j=j+3){
                 int[] visited = new int[9];
                 if(board[i][j]!='.'){
                     if(visited[Integer.valueOf(board[i][j]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i][j]-'0')-1]=1;
                 }
                 if(board[i-1][j-1]!='.'){
                     if(visited[Integer.valueOf(board[i-1][j-1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i-1][j-1]-'0')-1]=1;
                 }  
                if(board[i-1][j+1]!='.'){
                     if(visited[Integer.valueOf(board[i-1][j+1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i-1][j+1]-'0')-1]=1;
                 }
                 if(board[i-1][j]!='.'){
                     if(visited[Integer.valueOf(board[i-1][j]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i-1][j]-'0')-1]=1;
                 }
                if(board[i][j-1]!='.'){
                     if(visited[Integer.valueOf(board[i][j-1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i][j-1]-'0')-1]=1;
                 }
                 if(board[i][j+1]!='.'){
                     if(visited[Integer.valueOf(board[i][j+1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i][j+1]-'0')-1]=1;
                 }
                if(board[i+1][j-1]!='.'){
                     if(visited[Integer.valueOf(board[i+1][j-1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i+1][j-1]-'0')-1]=1;
                 }
                 if(board[i+1][j]!='.'){
                     if(visited[Integer.valueOf(board[i+1][j]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i+1][j]-'0')-1]=1;
                 }
                 if(board[i+1][j+1]!='.'){
                     if(visited[Integer.valueOf(board[i+1][j+1]-'0')-1]==1)
                          return false;
                     visited[Integer.valueOf(board[i+1][j+1]-'0')-1]=1;
                 }
                
            }
        }
        return true;
        
        
    }
}