class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> result = new ArrayList<String>();
        
        for(int k=0;k<words.length;k++){
            if(!result.contains(words[k])){
                if(search(board,words[k]))
                result.add(words[k]);
            
            }
            
        }
      return result;  
    }
    private boolean search(char[][] board,String word){
        
        for(int i=0;i<board.length;i++){
                for(int j=0;j<board[0].length;j++){
                    
                   if(board[i][j]==word.charAt(0)){
                       
                        int[][] used = new int[board.length][board[0].length];
                        if(find(board,used,word,i,j,1)){
                            return true;
                        }
                             
                   }  
                    
                }
        }
                    
        return false;
    }
    private boolean find(char[][] board,int[][] used, String word,int i,int j,int len){
        used[i][j]=1;
        if(len==word.length())
            return true;
        if((i>0)&&(used[i-1][j]==0)){
            
            if(board[i-1][j]==word.charAt(len)&&find(board,used,word,i-1,j,len+1))
                return true;
        }
        if((i<board.length-1)&&(used[i+1][j]==0)){
            
            if(board[i+1][j]==word.charAt(len)&&find(board,used,word,i+1,j,len+1))
                return true;
        }
         if((j>0)&&(used[i][j-1]==0)){
            
            if(board[i][j-1]==word.charAt(len)&&find(board,used,word,i,j-1,len+1))
                return true;
        }  
        if((j<board[0].length-1)&&(used[i][j+1]==0)) {
             if(board[i][j+1]==word.charAt(len)&&find(board,used,word,i,j+1,len+1))
                return true;
        }  
        used[i][j]=0;
        return false;
    }
   
}















 