class Solution {
  
    public int rotatedDigits(int N) {                     //看的答案  
        int count=0;
        int[] includeCount = new int[]{1,2,3,3,3,4,5,5,6,7};//0,1,2,5,6,8,9
        int[] excludeCount = new int[]{1,2,2,2,2,2,2,2,3,3};//0,1,8
        boolean[] isExclude = new boolean[]{true,true,false,false,false,false,false,false,true,false};
        boolean[] isValid = new boolean[]{true,true,true,false,false,true,true,false,true,true};
        char[] c = String.valueOf(N).toCharArray();
        int len =c.length;
        boolean exclude = true;
        for(int i=0,mul=len;i<len;i++,mul--){
            if((c[i]-'0'==0)&&(i!=(len-1))) continue;
            int index = i==len-1?c[i]-'0':c[i]-'0'-1;
            int a = includeCount[index]*(int)Math.pow(7,mul-1);
            int b = excludeCount[index]*(int)Math.pow(3,mul-1);
            if(exclude)
              count+=a-b;
            else count+=a;
            if(!isValid[c[i]-'0'])
                break;
            exclude=exclude&isExclude[c[i]-'0'];
            
            
        }
        
        
        return count;
        
    }
}
/*

    public int rotatedDigits(int N) {                     //看的答案  用动态规划 可以减少一些重复计算
        int count=0;
        int[] dp = new int[N+1];
        for(int i=0;i<=N;i++){
            
            if(i<10){
                
                if(i==3||i==4||i==7)
                    dp[i]=0;
                if(i==0||i==1||i==8)
                    dp[i]=1;
                if(i==2||i==5||i==6||i==9){
                    dp[i]=2;
                    count++;
                }
            }
           else if((dp[i/10]==1)&&(dp[i%10]==1))
                dp[i]=1;
          else if((dp[i/10]>=1)&&(dp[i%10]>=1)){
                dp[i]=2;
                count++;
            }   
        }
        return count;
        
    }
*/
